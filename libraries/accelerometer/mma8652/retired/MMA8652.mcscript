// Class to utilize MMA8652 Accelerometer

Class MMA8652 
    'Constants
    Const I2C_ADDR As Byte = 0x1d
    Const I2C_SPEED As Integer = 400000 //250000    
    Const CTRL_ID_DEFAULT As Byte = 0x1d //!<This is the factory pre-configured I2C address for an MMA8652
    
    'Registers From Library but without _REG
    Const STATUS As Byte = 0x00
    Const F_STATUS As Byte = 0x00
    Const OUT_X_MSB As Byte = 0x01
    Const OUT_X_LSB As Byte = 0x02
    Const OUT_Y_MSB As Byte = 0x03
    Const OUT_Y_LSB As Byte = 0x04
    Const OUT_Z_MSB As Byte = 0x05
    Const OUT_Z_LSB As Byte = 0x06
    Const F_SETUP As Byte = 0x09
    Const TRIG_CFG As Byte = 0x0a
    Const SYSMOD As Byte = 0x0b
    Const INT_SOURCE As Byte = 0x0c
    Const WHO_AM_I As Byte = 0x0d
    Const XYZ_DATA_CFG As Byte = 0x0e
    Const HP_FILTER_CUTOFF As Byte = 0x0f
    Const PL_STATUS As Byte = 0x10
    Const PL_CFG As Byte = 0x11
    Const PL_COUNT As Byte = 0x12
    Const PL_BF_ZCOMP As Byte = 0x13
    Const PL_THS As Byte = 0x14
    Const FF_MT_CFG As Byte = 0x15
    Const FF_MT_SRC As Byte = 0x16
    Const FF_MT_THS As Byte = 0x17
    Const FF_MT_COUNT As Byte = 0x18    
    Const TRANSIENT_CFG As Byte = 0x1d
    Const TRANSIENT_SRC As Byte = 0x1e
    Const TRANSIENT_THS As Byte = 0x1f
    Const TRANSIENT_COUNT As Byte = 0x20    
    Const PULSE_CFG As Byte = 0x21
    Const PULSE_SRC As Byte = 0x22
    Const PULSE_THSX As Byte = 0x23
    Const PULSE_THSY As Byte = 0x24
    Const PULSE_THSZ As Byte = 0x25
    Const PULSE_TMLT As Byte = 0x26
    Const PULSE_LTCY As Byte = 0x27
    Const PULSE_WIND As Byte = 0x28
    Const ASLP_COUNT As Byte = 0x29    
    Const CTRL_REG1 As Byte = 0x2a
    Const CTRL_REG2 As Byte = 0x2b
    Const CTRL_REG3 As Byte = 0x2c
    Const CTRL_REG4 As Byte = 0x2d
    Const CTRL_REG5 As Byte = 0x2e    
    Const OFF_X As Byte = 0x2f
    Const OFF_Y As Byte = 0x30
    Const OFF_Z As Byte = 0x31
    
    Const POSITION_DEFAULT As Byte = 2
    Const DELAY_DEFAULT As Byte = 200
    
    Const STATUS_ZYXDR As Byte = 0x08
    Const BUF_SIZE As Byte = 6
    
    'Masks
    Const SRC_ASLP_MASK As Byte = 0x80
    Const SRC_FIFO_MASK As Byte = 0x40 // MMA8652 only
    Const SRC_TRANS_MASK As Byte = 0x20
    Const SRC_LNDPRT_MASK As Byte = 0x10
    Const SRC_PULSE_MASK As Byte = 0x08
    Const SRC_FF_MT_MASK As Byte = 0x04
    Const SRC_DRDY_MASK As Byte = 0x01
    
    Const ST_MASK As Byte = 0x80
    Const RST_MASK As Byte = 0x40
    Const SMODS1_MASK As Byte = 0x10
    Const SMODS0_MASK As Byte = 0x08
    Const SLPE_MASK As Byte = 0x04
    Const MODS1_MASK As Byte = 0x02
    Const MODS0_MASK As Byte = 0x01
    Const SMODS_MASK As Byte = 0x18
    Const MODS_MASK As Byte = 0x03
    
    Const DBCNTM_MASK As Byte = 0x80
    Const PL_EN_MASK As Byte = 0x40
    
    Const FS1_MASK As Byte = 0x02
    Const FS0_MASK As Byte = 0x01
    Const FS_MASK As Byte = 0x03
    
    Const ASLP_RATE1_MASK As Byte = 0x80
    Const ASLP_RATE0_MASK As Byte = 0x40
    Const DR2_MASK As Byte = 0x20
    Const DR1_MASK As Byte = 0x10
    Const DR0_MASK As Byte = 0x08
    Const LNOISE_MASK As Byte = 0x04
    Const FREAD_MASK As Byte = 0x02
    Const ACTIVE_MASK As Byte = 0x01
    Const ASLP_RATE_MASK As Byte = 0xc0
    Const DR_MASK As Byte = 0x38
    
    Const FGERR_MASK As Byte = 0x80 
    Const FGT_4_MASK As Byte = 0x40 
    Const FGT_3_MASK As Byte = 0x20 
    Const FGT_2_MASK As Byte = 0x10 
    Const FGT_1_MASK As Byte = 0x08 
    Const FGT_0_MASK As Byte = 0x04 
    Const FGT_MASK As Byte = 0x7c 
    Const SYSMOD1_MASK As Byte = 0x02
    Const SYSMOD0_MASK As Byte = 0x01
    Const SYSMOD_MASK As Byte = 0x03
    
    // PL_BF_ZCOMP Back/Front and Z Compensation Register
    Const BKFR1 As Byte = 0x80
    Const BKFR0 As Byte = 0x40
    Const ZLOCK2 As Byte = 0x04
    Const ZLOCK1 As Byte = 0x02
    Const ZLOCK0 As Byte = 0x01
    
    Const BKFR1_MASK As Byte = 0x80
    Const BKFR0_MASK As Byte = 0x40
    Const ZLOCK2_MASK As Byte = 0x04
    Const ZLOCK1_MASK As Byte = 0x02
    Const ZLOCK0_MASK As Byte = 0x01
    Const BKFR_MASK As Byte = 0xc0
    Const ZLOCK_MASK As Byte = 0x07
    
    // PL_P_L_THS Portrait to Landscape Threshold Register
    Const P_L_THS4 As Byte = 0x80
    Const P_L_THS3 As Byte = 0x40
    Const P_L_THS2 As Byte = 0x20
    Const P_L_THS1 As Byte = 0x10
    Const P_L_THS0 As Byte = 0x08
    Const HYS2 As Byte = 0x04
    Const HYS1 As Byte = 0x02
    Const HYS0 As Byte = 0x01
    
    Const P_L_THS4_MASK As Byte = 0x80
    Const P_L_THS3_MASK As Byte = 0x40
    Const P_L_THS2_MASK As Byte = 0x20
    Const P_L_THS1_MASK As Byte = 0x10
    Const P_L_THS0_MASK As Byte = 0x08
    Const HYS2_MASK As Byte = 0x04
    Const HYS1_MASK As Byte = 0x02
    Const HYS0_MASK As Byte = 0x01
    Const P_L_THS_MASK As Byte = 0xf8
    Const HYS_MASK As Byte = 0x07
    
    // CTRL_REG3 Interrupt Control Register
    Const FIFO_GATE_MASK As Byte = 0x80 // MMA8652 only
    Const WAKE_TRANS_MASK As Byte = 0x40 // MMA8652 only
    Const WAKE_LNDPRT_MASK As Byte = 0x20
    Const WAKE_PULSE_MASK As Byte = 0x10 // MMA8652 only
    Const WAKE_FF_MT_MASK As Byte = 0x08
    Const IPOL_MASK As Byte = 0x02
    Const PP_OD_MASK As Byte = 0x01
    Const WAKE_CLEAR_MASK As Byte = 0x3c
    
    // CTRL_REG4 Interrupt Enable Register
    Const INT_EN_ASLP_MASK As Byte = 0x80
    Const INT_EN_FIFO_MASK As Byte = 0x40 // MMA8652 only
    Const INT_EN_TRANS_MASK As Byte = 0x20 // MMA8652 only
    Const INT_EN_LNDPRT_MASK As Byte = 0x10
    Const INT_EN_PULSE_MASK As Byte = 0x08 // MMA8652 only
    Const INT_EN_FF_MT_MASK As Byte = 0x04
    Const INT_EN_DRDY_MASK As Byte = 0x01
    Const INT_CLEAR_MASK As Byte = 0xfd
    
    // CTRL_REG5 Interrupt Configuration Register
    Const INT_CFG_ASLP_MASK As Byte = 0x80
    Const INT_CFG_FIFO_MASK As Byte = 0x40 // MMA8652 only
    Const INT_CFG_TRANS_MASK As Byte = 0x20 // MMA8652 only
    Const INT_CFG_LNDPRT_MASK As Byte = 0x10
    Const INT_CFG_PULSE_MASK As Byte = 0x08 // MMA8652 only
    Const INT_CFG_FF_MT_MASK As Byte = 0x04
    Const INT_CFG_DRDY_MASK As Byte = 0x01
    Const INT_CFG_CLEAR_MASK As Byte = 0xfd
    
    // TRANSIENT_SRC Transient Source Register
    Const TEA_MASK As Byte = 0x40
    Const ZTRANSE_MASK As Byte = 0x20
    Const Z_TRANS_POL_MASK As Byte = 0x10
    Const YTRANSE_MASK As Byte = 0x08
    Const Y_TRANS_POL_MASK As Byte = 0x04
    Const XTRANSE_MASK As Byte = 0x02
    Const X_TRANS_POL_MASK As Byte = 0x01
    
    // TRANSIENT_CFG Transient Configuration Register
    Const TELE_MASK As Byte = 0x10
    Const ZTEFE_MASK As Byte = 0x08
    Const YTEFE_MASK As Byte = 0x04
    Const XTEFE_MASK As Byte = 0x02
    Const HPF_BYP_MASK As Byte = 0x01
    
    'Values
    Const FULL_SCALE_2G As Byte = 0x00
    Const FULL_SCALE_4G As Byte = 0x01
    Const FULL_SCALE_8G As Byte = 0x02
    
    //Awake Frequencies
    Const AODR_800HZ As Byte = 0x00, // 200 Hz
    Const AODR_400HZ As Byte = 0x08
    Const AODR_200HZ As Byte = 0x10
    Const AODR_100HZ As Byte = 0x18
    Const AODR_50HZ As Byte = 0x20
    Const AODR_12_5HZ As Byte = 0x28 // 12.5 Hz, etc.
    Const AODR_6_25HZ As Byte = 0x30
    Const AODR_1_56HZ As Byte = 0x38
    
    //Sleep Frequencies
    Const SODR_50HZ As Byte = 0x00
    Const SODR_12_5HZ As Byte = 0x40 // 12.5 Hz, etc.
    Const SODR_6_25HZ As Byte = 0x80
    Const SODR_1_56HZ As Byte = 0xc0
    
    //Sleep modes
    Const SMOD_NORMAL As Byte = 0x00
    Const SMOD_LOW_NOISE As Byte = 0x08 //(SMODS0_MASK)
    Const SMOD_HIGH_RES As Byte = 0x10 //(SMODS1_MASK)
    Const SMOD_LOW_POWER As Byte = 0x18 //(SMODS1_MASK+SMODS0_MASK)
    
    //Wake modes
    Const MOD_NORMAL As Byte = 0x00
    Const MOD_LOW_NOISE As Byte = 0x01 //(MODS0_MASK)
    Const MOD_HIGH_RES As Byte = 0x02 //(MODS1_MASK)
    Const MOD_LOW_POWER As Byte = 0x03 //(MODS1_MASK+MODS0_MASK)
    
    Const SYSMOD_STANDBY As Byte = 0x00
    Const SYSMOD_WAKE As Byte = 0x02
    Const SYSMOD_SLEEP As Byte = 0x01
    
    Const FIFO_GATE As Byte = 0x80 // MMA8652 only
    Const WAKE_TRANS As Byte = 0x40 // MMA8652 only
    Const WAKE_LNDPRT As Byte = 0x20
    Const WAKE_PULSE As Byte = 0x10 // MMA8652 only
    Const WAKE_FF_MT As Byte = 0x08
    Const IPOL As Byte = 0x02
    Const PP_OD As Byte = 0x01
    
    Const INT_EN_ASLP As Byte = 0x80
    Const INT_EN_FIFO As Byte = 0x40 // MMA8652 only
    Const INT_EN_TRANS As Byte = 0x20 // MMA8652 only
    Const INT_EN_LNDPRT As Byte = 0x10
    Const INT_EN_PULSE As Byte = 0x08 // MMA8652 only
    Const INT_EN_FF_MT As Byte = 0x04
    Const INT_EN_DRDY As Byte = 0x01
    
    Const NEWLP As Byte = 0x80
    Const LO As Byte = 0x40
    Const LAPO1 As Byte = 0x04
    Const LAPO0 As Byte = 0x02
    Const BAFRO As Byte = 0x01
    
    Const TEA As Byte = 0x40
    Const ZTRANSE As Byte = 0x20
    Const Z_TRANS_POL As Byte = 0x10
    Const YTRANSE As Byte = 0x08
    Const Y_TRANS_POL As Byte = 0x04
    Const XTRANSE As Byte = 0x02
    Const X_TRANS_POL As Byte = 0x01
    
    Const INT_CFG_ASLP As Byte = 0x80
    Const INT_CFG_FIFO As Byte = 0x40 // MMA8652 only
    Const INT_CFG_TRANS As Byte = 0x20 // MMA8652 only
    Const INT_CFG_LNDPRT As Byte = 0x10
    Const INT_CFG_PULSE As Byte = 0x08 // MMA8652 only
    Const INT_CFG_FF_MT As Byte = 0x04
    Const INT_CFG_DRDY As Byte = 0x01
    
    Const TELE As Byte = 0x10
    Const ZTEFE As Byte = 0x08
    Const YTEFE As Byte = 0x04
    Const XTEFE As Byte = 0x02
    Const HPF_BYP As Byte = 0x01
    
    Const SRC_ASLP As Byte = 0x80
    Const SRC_FIFO As Byte = 0x40 // MMA8652 only
    Const SRC_TRANS As Byte = 0x20
    Const SRC_LNDPRT As Byte = 0x10
    Const SRC_PULSE As Byte = 0x08
    Const SRC_FF_MT As Byte = 0x04
    Const SRC_DRDY As Byte = 0x01
    
    Const LOW_TRIGGER_THRESHOLD As Float = 0.0
    Const HIGH_TRIGGER_THRESHOLD As Float = 8.0
    Const TRANSIENT_THRESHOLD_RESOLUTION As Float = 0.063
    
    Const LOW_DURATION_MS As Float = 0.0
    Const HIGH_DURATION_MS As Float = 5100.0
    Const DURATION_RESOLUTION As Float = 20.0
    
    Public gAccelerometer As I2c
    Public online As Boolean = False
    
    Public Sub New()
        gAccelerometer = I2c.Create(I2C_SPEED, Pin.SCL, Pin.SDA, I2C_ADDR)
        If whoAmI() = 0x4a Then
            online = True
            reset()
            // Set interrupt active low
            write(CTRL_REG3, read(CTRL_REG3) & ~IPOL_MASK) // clear bit 1 (active low)
            // Set interrupt push/pull
            write(CTRL_REG3, read(CTRL_REG3) & ~PP_OD_MASK) // clear bit 0 (push-pull)
        End If
    End Sub
    
    Public Function map_range(var As Float, old_min As Float, old_max As Float, new_min As Byte, new_max As Byte) As Byte
        'Convert floats to byte range
        Dim old_range As Float = old_max - old_min
        Dim new_range As Float = new_max - new_min
        Return ((((var - old_min) * new_range) / old_range) + new_min).ToByte
    End Function
    
    Public Function map_range(var As Float, old_min As Byte, old_max As Byte, new_min As Float, new_max As Float) As Float
        'convert bytes to floats range
        Dim old_range As Float = old_max - old_min
        Dim new_range As Float = new_max - new_min
        Return ((((var - old_min) * new_range) / old_range) + new_min).ToFloat
    End Function
    
    Public Function GetmsPerCount() As Float
        //read frequency and mode to determine milliseconds per count for debounce (see table 40 p34 in DS)
        Dim frequency As Byte = GetWakeModeFrequency()
        Dim mode As Byte = GetWakeModeResolution()
        Dim ms As Float = 1.25
        
        Select mode
            Case MOD_NORMAL
                Select frequency
                    Case AODR_800HZ
                        ms = 1.25
                    Case AODR_400HZ
                        ms = 2.5
                    Case AODR_200HZ
                        ms = 5.0
                    Case AODR_100HZ
                        ms = 10.0
                    Case Else
                        ms = 20.0
                End Select
            Case MOD_LOW_NOISE
                Select frequency
                    Case AODR_800HZ
                        ms = 1.25
                    Case AODR_400HZ
                        ms = 2.5
                    Case AODR_200HZ
                        ms = 5.0
                    Case AODR_100HZ
                        ms = 10.0
                    Case AODR_50HZ
                        ms = 20.0
                    Case Else
                        ms = 80.0
                End Select
            Case MOD_HIGH_RES
                Select frequency
                    Case AODR_800HZ
                        ms = 1.25
                    Case Else
                        ms = 2.5
                End Select
            Case MOD_LOW_POWER
                Select frequency
                    Case AODR_800HZ
                        ms = 1.25
                    Case AODR_400HZ
                        ms = 2.5
                    Case AODR_200HZ
                        ms = 5.0
                    Case AODR_100HZ
                        ms = 10.0
                    Case AODR_50HZ
                        ms = 20.0
                    Case AODR_12_5HZ
                        ms = 80.0
                    Case AODR_6_25HZ
                        ms = 160.0
                    Case AODR_1_56HZ
                        ms = 160.0
                End Select
        End Select
        Return ms
    End Function
    
    Public Function GetmsFromFrequency() As Float
        //read frequency to determine Wake mode milliseconds per cycle
        Dim frequency As Byte = GetWakeModeFrequency()
        Dim ms As Float = 0
        Select frequency
            Case AODR_800HZ
                ms = 1.25
            Case AODR_400HZ
                ms = 2.5
            Case AODR_200HZ
                ms = 5.0
            Case AODR_100HZ
                ms = 10.0
            Case AODR_50HZ
                ms = 20.0
            Case AODR_12_5HZ
                ms = 80.0
            Case AODR_6_25HZ
                ms = 160.0
            Case AODR_1_56HZ
                ms = 640.0
            Case Else
                ms = 1.25 //default
        End Select
        Return ms
    End Function
    
    Public Function readAccelData() As ListOfShort
        Dim rawData As ListOfByte = New ListOfByte // x/y/z accel register data stored here
        Dim destination As ListOfShort = New ListOfShort
        rawData = read(OUT_X_MSB, 6) // Read the six raw data registers into data array
        If rawData <> Nothing Then
            destination.Add((rawData(0) << 8 | rawData(1)) >> 4)
            destination.Add((rawData(2) << 8 | rawData(3)) >> 4)
            destination.Add((rawData(4) << 8 | rawData(5)) >> 4)
        End If
        Return destination
    End Function 
    
    Public Function readAccelData2sCompliment() As ListOfShort
        Dim destination As ListOfShort = New ListOfShort // x/y/z accel register data stored here
        destination = readAccelData() // Read the data as shorts
        If destination <> Nothing Then
            //convert values to 2's compliment
            If (((destination(0) >> 8) & 0xff) > 0x7f) Then
                destination(0) = (~destination(0) + 1) * (-1)
            End If
            If (((destination(1) >> 8) & 0xff) > 0x7f) Then
                destination(1) = (~destination(1) + 1) * (-1)
            End If
            If (((destination(2) >> 8) & 0xff) > 0x7f) Then
                destination(2) = (~destination(2) + 1) * (-1)
            End If
        End If
        Return destination
    End Function
    
    // Read interrupt source register (see MMA8652FC datasheet, p. 28)
    Public Function readIntSource() As Byte
        Return read(INT_SOURCE)
    End Function
    
    // Read portrait/landscape status register (see MMA8652FC datasheet, p. 32)
    Public Function readPLStatus() As Byte
        Return read(PL_STATUS)
    End Function
    
    // Read pulse source register (see MMA8652FC datasheet, p. 45)
    Public Function readPulseSource() As Byte
        Return read(PULSE_SRC)
    End Function
    
    // Read Transient source register (see MMA8652FC datasheet, p. 43)
    Public Function readTransientSource() As Byte
        Return read(TRANSIENT_SRC)
    End Function
    
    // Read free-fall source register (see MMA8652FC datasheet, p. 36)
    Public Function readFreeFallSource() As Byte
        Return read(FF_MT_SRC)
    End Function
    
    // Read "who am I" register. It should return 0x4A
    Public Function whoAmI() As Byte
        Return read(WHO_AM_I)
    End Function
    
    Public Sub Standby()
        'set active bit to 0 put accel in standby mode
        write(CTRL_REG1, read(CTRL_REG1) & ~ACTIVE_MASK)
    End Sub
    
    Public Sub Active()
        'set active bit to put accel in active mode
        write(CTRL_REG1, read(CTRL_REG1) | ACTIVE_MASK)
    End Sub
    
    Public Sub SetRegister(reg As Byte)
        Dim data As ListOfByte = New ListOfByte
        data.Add(reg)
        gAccelerometer.Write(data, False)
    End Sub
    
    Public Function read(address As Byte) As Byte
        // read single byte
        SetRegister(address)
        Dim result As Byte = 0
        Dim value As ListOfByte = gAccelerometer.Read(1, True)
        If value <> Nothing Then
            result = value(0)
        End If
        Return result
    End Function
    
    Public Function read(address As Byte, length As Byte) As ListOfByte
        //read multiple bytes
        SetRegister(address)
        Dim value As ListOfByte = gAccelerometer.Read(length, True)
        Return value
    End Function
    
    Public Sub write(address As Byte, value As Byte)
        //write single byte
        Dim data As ListOfByte = New ListOfByte
        data.Add(address)
        data.Add(value)
        gAccelerometer.Write(data, True)
    End Sub
    
    Public Sub reset()
        write(CTRL_REG2, RST_MASK)
        While (read(CTRL_REG2) & RST_MASK) = RST_MASK
            Thread.Sleep(1000) //wait for reset to end
        End While
    End Sub
    
    Public Sub SetRange(range As Byte)
        write(XYZ_DATA_CFG, (read(XYZ_DATA_CFG) & ~FS_MASK) | range)  
    End Sub
    
    Public Function GetRange() As Byte
        Return read(XYZ_DATA_CFG) & FS_MASK  
    End Function
    
    Public Sub SetWakeModeFrequency(frequency As Byte)
        write(CTRL_REG1, (read(CTRL_REG1) & ~DR_MASK) | frequency)
    End Sub
    
    Public Function GetWakeModeFrequency() As Byte
        Return read(CTRL_REG1) & DR_MASK
    End Function
    
    Public Sub SetWakeModeResolution(resolution As Byte)
        write(CTRL_REG2, (read(CTRL_REG2) & ~MODS_MASK) | resolution) // clear bits 0 and 1, sent wake mode resolution
    End Sub
    
    Public Function GetWakeModeResolution() As Byte
        Return read(CTRL_REG2) & MODS_MASK // read bits 0 and 1
    End Function
    
    Public Sub SetSleepMode(mode As Byte)
        write(CTRL_REG2, (read(CTRL_REG2) & ~SLPE_MASK) | mode) // clear bit 2, set sleep mode
    End Sub
    
    Public Function GetSleepMode() As Byte
        Return read(CTRL_REG2) & SLPE_MASK // read bit 2
    End Function
    
    Public Sub SetSleepModeFrequency(frequency As Byte)
        write(CTRL_REG1, (read(CTRL_REG1) & ~ASLP_RATE_MASK) | frequency)
    End Sub
    
    Public Function GetSleepModeFrequency() As Byte
        Return (read(CTRL_REG1) & ASLP_RATE_MASK) >> 7
    End Function
    
    Public Sub SetSleepModeDuration(duration As Float)
        //period of inactivity before device enters sleep mode, in ms
        Dim durationByte As Byte = 0
        If GetWakeModeFrequency() = AODR_1_56HZ Then
            durationByte = map_range(duration, 0, 162000.0, 0, 0xff)
        Else
            durationByte = map_range(duration, 0, 81000.0, 0, 0xff)
        End If
        write(ASLP_COUNT, durationByte)
    End Sub
    
    Public Function GetSleepModeDuration() As Byte
        Return read(ASLP_COUNT)
    End Function
    
    Public Function GetSleepModeDurationms() As Float
        Return read(ASLP_COUNT)
        Dim durationByte As Byte = read(ASLP_COUNT)
        If GetWakeModeFrequency() = AODR_1_56HZ Then
            Return map_range(durationByte, 0, 0xff, 0, 162000.0)
        Else
            Return map_range(durationByte, 0, 0xff, 0, 81000.0)
        End If
    End Function
    
    Public Sub SetSleepModeResolution(resolution As Byte)
        write(CTRL_REG2, (read(CTRL_REG2) & ~SMODS_MASK) | resolution) // clear bits 3 and 4, set sleep mode resolution
    End Sub
    
    Public Function GetSleepModeResolution() As Byte
        Return read(CTRL_REG2) & SMODS_MASK // read bits 3 and 4
    End Function
    
    Public Sub SetSleepModeInterrupts(interrupts As Byte)
        write(CTRL_REG3, (read(CTRL_REG3) & ~interrupts) | interrupts) // clear interrupts, set Wake on interrupts
    End Sub
    
    Public Sub SetEnableInterrupts(interrupts As Byte)
        write(CTRL_REG4, (read(CTRL_REG4) & ~interrupts) | interrupts) // clear interrupts,  enable/disable interrupts
    End Sub
    
    Public Sub SetInterruptsINT(interrupts As Byte)
        'route interrupt to INT1 pin (ff sets all interrupts to INT1 , 00 to INT2)
        write(CTRL_REG5, (read(CTRL_REG5) & ~interrupts) | interrupts) // clear interrupts, set interrupts to INT1 (rest to INT2)
    End Sub
    
    Public Sub SetTransientCFG(transient As Byte)
        'options are TELE | ZTEFE | YTEFE | XTEFE | HPF_BYP (latch enable, Z,Y,X enable, Filter disable)
        write(TRANSIENT_CFG, transient) // set transients config, High Pass Filter (bit 0) enabled by default
    End Sub
    
    Public Sub SetTransientThreshold(threshold As Float)
        'A 7-bit unsigned number, with 0.063 g/LSB. The maximum threshold is ±8g (irrispective of Range setting)
        Dim thresholdByte As Byte = map_range(threshold, 0, 8.0, 0, 0x7f)
        If thresholdByte <= 0x7f Then
            write(TRANSIENT_THS, thresholdByte)
        End If
    End Sub
    
    Public Sub SetTransientCount(count As Byte)
        'Set Duration in counts (if set to 0, causes interrupt immediately, once threshold exceeded)
        'The TRANSIENT_COUNT sets the minimum number of debounce counts continuously matching the condition where the
        'unsigned value of high - pass filtered data Is greater than the user - specified value of TRANSIENT_THS.
        write(TRANSIENT_COUNT, count)
    End Sub
    
    Public Sub SetTransientDuration(duration As Float)
        'Set Duration in ms (if set to 0, causes interrupt immediately, once threshold exceeded)
        'The TRANSIENT_COUNT sets the minimum number of debounce counts continuously matching the condition where the
        'unsigned value of high - pass filtered data Is greater than the user - specified value of TRANSIENT_THS.
        'The duration in ms depends on the frequency, ie 50 Hz = 20ms per count, so 100ms = 5 counts
        'But is effected by mode also.... see table 66 p44 of DS
        Dim msPerCount As Float = GetmsPerCount()
        Dim count As Byte = (duration / msPerCount).ToByte
        write(TRANSIENT_COUNT, count)
    End Sub
    
    Public Sub EnablePL(enable As Boolean)
        If enable Then
            write(PL_CFG, (read(PL_CFG) & ~PL_EN_MASK) | PL_EN_MASK) // Enable P/L (debounce enabled by default)
        Else
            write(PL_CFG, (read(PL_CFG) & ~PL_EN_MASK)) // Disable P/L (debounce enabled by default)
        End If
    End Sub
    
    Public Sub EnablePLDebounce(enable As Boolean)
        '0 Decrements debounce whenever the condition of interest is no longer valid.
        '1 Clears the counter whenever the condition of interest is no longer valid. (default)
        If enable Then
            write(PL_CFG, (read(PL_CFG) & ~DBCNTM_MASK) | DBCNTM_MASK) // Enable P/L (debounce enabled by default)
        Else
            write(PL_CFG, (read(PL_CFG) & ~DBCNTM_MASK)) // Disable P/L (debounce enabled by default)
        End If
    End Sub
    
    Public Sub SetPLZLOCK(zlock As Byte)
        'The Z-Lock angle compensation bits allows you to adjust the Z-lockout region from 14° up to 43°.
        'ZLOCK (bits 0,1,2) 0 = 14° (min), 0x04 = 29° (default) x07 = 43° (max)
        'Z-lock angle threshold(1)
        'Step size is 4°
        'Range is from 14° to 43°
        If zlock <= 0x07 Then
            write(PL_BF_ZCOMP, (read(PL_BF_ZCOMP) & ~ZLOCK_MASK) | zlock)
        End If
    End Sub
    
    Public Sub SetPLZLOCKDegrees(zlock As Float)
        'The Z-Lock angle compensation bits allows you to adjust the Z-lockout region from 14° up to 43°.
        'ZLOCK (bits 0,1,2) 0 = 14° (min), 0x04 = 29° (default) x07 = 43° (max)
        'Z-lock angle threshold(1)
        'Step size is 4°
        'Range is from 14° to 43°
        Dim zlockByte As Byte = map_range(zlock, 14.0, 43.0, 0, 0x07)
        If zlockByte <= 0x07 Then
            write(PL_BF_ZCOMP, (read(PL_BF_ZCOMP) & ~ZLOCK_MASK) | zlockByte)
        End If
    End Sub
    
    Public Sub SetPLBFThreshold(threshold As Float)
        'B/F = bits 6,7 see table 44 for setting (suggest leave at default 75°)
        'Back/Front trip angle threshold(1)
        'Step size = 5°
        'Range = ±(65° to 80°)
        Dim thresholdByte As Byte = map_range(threshold, 65.0, 80.0, 0, 0x04)
        If thresholdByte <= 0x04 Then
            write(PL_BF_ZCOMP, (read(PL_BF_ZCOMP) & ~BKFR_MASK) | (thresholdByte << 6))
        End If
    End Sub
    
    Public Sub SetPLThreshold(threshold As Float)
        '(bits 3,4,5,6,7)
        'Portrait/Landscape trip threshold angle (from 15° to 75°) in 5 deg steps
        'See Table 47, “Threshold angle thresholds look-up table,” on
        'page 36 of DS for the values with the corresponding approximate threshold angle.
        '0x10 = 45° default
        Dim thresholdByte As Byte = map_range(threshold, 15.0, 75.0, 0x07, 0x19)
        If thresholdByte >= 0x07 And thresholdByte <= 0x19 Then
            write(PL_THS, (read(PL_THS) & ~P_L_THS_MASK) | (thresholdByte << 4))
        End If
    End Sub
    
    Public Sub SetPLHysteresis(hysteresis As Float)
        '(bits 0,1,2)
        'This angle is added to the threshold angle, for a smoother transition
        'from portrait to landscape and landscape to portrait.
        'This angle ranges from 0° to ±24°.
        '±14° (default)
        Dim hysteresisByte As Byte = map_range(hysteresis, 0, 24.0, 0, 0x07)
        If hysteresisByte <= 0x07 Then
            write(PL_THS, (read(PL_THS) & ~HYS_MASK) | hysteresisByte)
        End If
    End Sub
    
    Public Sub SetPLCount(count As Byte)
        'The debounce counter weighting (time step) changes, based on the ODR and the
        'Oversampling mode. Table 40 explains the time step value for all sample rates and all
        'Oversampling modes.
        write(PL_COUNT, count) // debounce counter 0x10 = 320ms (at 50 hz)
    End Sub
    
    Public Sub SetPLDuration(duration As Float)
        'Set Duration in ms (if set to 0, causes interrupt immediately, once threshold exceeded)
        'The Portrait/Landscape Debounce register sets the debounce count for the orientation state transition. The minimum debounce
        'latency is determined by the data rate (which is set by the product of the selected system ODR and PL_COUNT registers).
        'The duration in ms depends on the frequency, ie 50 Hz = 20ms per count, so 100ms = 5 counts
        'But is effected by mode also.... see table 40 p34 of DS
        Dim msPerCount As Float = GetmsPerCount()
        Dim count As Byte = (duration / msPerCount).ToByte
        write(PL_COUNT, count)
    End Sub
    
    Public Sub calibrate()
        'Calibration routine, don't know if this works or not!
        Dim accel_bias As ListOfInteger = New ListOfInteger
        accel_bias.Add(0)
        accel_bias.Add(0)
        accel_bias.Add(0)
        Dim fcount As Integer
        Dim temp As ListOfShort = New ListOfShort
        
        // Clear all interrupts by reading the data output and F_STATUS registers
        temp = readAccelData()
        read(F_STATUS)
        
        Standby() // Must be in standby to change registers
        
        SetWakeModeFrequency(AODR_100HZ) // select 100 Hz ODR
        fcount = 100 // sample for 1 second
        SetRange(FULL_SCALE_2G) // select 2 g full scale
        Dim accelsensitivity As Short = 1024 // 1024 LSB/g
        
        Active() // Set to active to start collecting data
        
        For ii As Integer = 0 To fcount        
            temp = readAccelData()
            
            accel_bias(0) += temp(0)
            accel_bias(1) += temp(1)
            accel_bias(2) += temp(2)
            
            Thread.Sleep(15000) // wait for a new data reading (100 Hz)
        Next
        
        accel_bias(0) = (accel_bias(0) / fcount).ToInteger// get average values
        accel_bias(1) = (accel_bias(1) / fcount).ToInteger
        accel_bias(2) = (accel_bias(2) / fcount).ToInteger
        
        If (accel_bias(2) > 0) Then
            accel_bias(2) -= accelsensitivity // Remove gravity from the z-axis accelerometer bias calculation
        Else
            accel_bias(2) += accelsensitivity
        End If
        
        Dim rawData As ListOfByte = New ListOfByte
        rawData.Add((-accel_bias(0) / 2).ToByte& 0xff) // get average values
        rawData.Add((-accel_bias(1) / 2).ToByte& 0xff) // get average values
        rawData.Add((-accel_bias(2) / 2).ToByte& 0xff) // get average values
        
        Standby() // Must be in standby to change registers
        
        write(OFF_X, rawData(0)) // X-axis compensation  
        write(OFF_Y, rawData(1)) // Y-axis compensation  
        write(OFF_Z, rawData(2)) // z-axis compensation 
        
        Active() // Set to active to start reading
    End Sub
    
    'ConfigureShockInterrupt - configures device to interrupt on shock (currently will interupt on any axis, x,y,z axis configuration can be added later)
    '
    'threshold As Float - trigger threshold (0.0 Gs ~ 8 Gs), 0.063mg steps
    'Duration As Float - Duration for threshold to be present to active interrupt (0 ms (immediate) to 5100ms), 20ms steps @ 50Hz
    Public Function ConfigureShockInterrupt(threshold As Float, duration As Float) As Boolean
        Dim result As Boolean = False
        'threshold in g 0 - 8.0
        'duration in ms
        
        If ((threshold >= LOW_TRIGGER_THRESHOLD And threshold <= HIGH_TRIGGER_THRESHOLD)) And ((duration >= LOW_DURATION_MS And duration <= HIGH_DURATION_MS)) Then 
            
            'Put device in standby mode (can only write registers in Standby mode)
            Standby()
            
            'Setup the 3 data rate bits, from DR 0 to 7
            SetWakeModeFrequency(AODR_50HZ) // set 50 Hz Wake Mode frequency
            'Setup the 2 data rate bits, from SDR 0 to 4
            SetSleepModeFrequency(SODR_12_5HZ) // set sleep mode frequency to 12.5 Hz
            'set duration (in ms) before device auto sleeps (set wake mode frequency first)
            SetSleepModeDuration(2000)
            'Low Power Mode (sleep mode on)
            SetSleepMode(SLPE_MASK) // clear bit 2, then set bit 2 enable sleep mode
            'set Awake resolution
            SetWakeModeResolution(MOD_LOW_POWER) // clear bits 0 and 1, set wake low power mode
            'set Sleep resolution
            SetSleepModeResolution(SMOD_LOW_POWER) // clear bits 4 and 5, set sleep mode low power
            'Wakeup if transient interrupt, push/pull, active low (set in New config)
            'set sleep mode interrupt scheme
            SetSleepModeInterrupts(WAKE_TRANS) // clear bit 6, set Wake on TRANS Interrupt
            'enable transient interrupts
            SetEnableInterrupts(INT_EN_TRANS) // clear bit 5, set TRANS Interrupt
            'route interrupt to INT1 pin (ff sets all interrupts to INT1 , 00 to INT2)
            SetInterruptsINT(INT_CFG_TRANS) // clear bit 5, set TRANS Interrupt to INT1
            'latch events and enable on all axis (now only Z axis)
            SetTransientCFG(TELE | ZTEFE) // transients latched (TELE), Z enabled. High Pass Filter (bit 0) enabled by default
            'Set Threshold 0.0 ~ 23.622 Gs Bit 8 of TRANSIENT_THS sets debounce mode (0 default)
            SetTransientThreshold(threshold) //A 7-bit unsigned number, with 0.063 g/LSB. The maximum threshold is ±8g (irrispective of Range setting).
            'Set Duration (in ms if set to 0, causes interrupt immediately, once threshold exceeded
            SetTransientDuration(duration)
            
            'Put device in active mode
            Active()
            result = True
        Else
            'incorrect range, return error
            result = False
        End If
        Return result
    End Function
    
    'ConfigureOrientationInterrupt - configures device to interrupt on orientation change
    Public Function ConfigureOrientationInterrupt(threshold As Float, duration As Float) As Boolean
        Dim result As Boolean = False
        'threshold in degrees 45 degrees default
        'duration in ms
        
        If (duration >= LOW_DURATION_MS And duration <= HIGH_DURATION_MS) Then 
            
            Standby()
            
            'Setup the 3 data rate bits, from DR 0 to 7
            SetWakeModeFrequency(AODR_50HZ) // set 50 Hz Wake Mode
            'Low Power Mode (sleep mode on)
            SetSleepMode(SLPE_MASK) // clear bit 3, enable sleep mode
            'set Awake resolution
            SetWakeModeResolution(MOD_LOW_POWER) // clear bits 0 and 1, sent wake low power mode
            'set Sleep resolution
            SetSleepModeResolution(SMOD_LOW_POWER) // clear bits 4 and 5, set sleep mode low power
            'Wakeup if orientation interrupt, push/pull, active low (set in New config)
            'set sleep mode interrupt scheme
            SetSleepModeInterrupts(WAKE_LNDPRT) // clear bit 5, set Wake on LP Interrupt
            'enable orientation interrupts
            SetEnableInterrupts(INT_EN_LNDPRT) // clear bit 4, set LP Interrupt
            'route interrupt to INT1 pin (ff sets all interrupts to INT1 , 00 to INT2)
            SetInterruptsINT(INT_CFG_LNDPRT) // clear bit 4, set LP Interrupt to INT1
            // Set up portrait/landscape registers - 4 steps:
            // 1. Enable P/L
            // 2. Set the back/front angle trigger points (z-lock)
            // 3. Set the threshold/hysteresis angle
            // 4. Set the debouce rate
            // For more info check out this app note: http://cache.freescale.com/files/sensors/doc/app_note/AN4068.pdf
            EnablePL(True) 'Enable P/L (debounce enabled by default)
            EnablePLDebounce(True) 'set debounce to mode 1 (default)
            SetPLZLOCKDegrees(43) 'set to 43 degrees: ZLOCK Treshold (bits 0,1,2) 0 = 14° (min), 0x04 = 29° (default) x07 = 43° (max)
            //SetPLZLOCK(0x07)    'same as above, but set directly
            SetPLBFThreshold(threshold) 'BF deg threshold (45 default)
            //SetPLHysteresis(14)     '14deg hyst (14 default)
            //SetPLCount(0x05)          'debounce counter 0x05 = 100ms (at 50 hz in Low Power mode)
            SetPLDuration(duration) 'debounce counter 0x10 = 320ms (at 50 hz LP mode) if set to 0 causes interrupt immediately, once threshold exceeded
            //SetPLCount(0x10)
            
            Active()
            result = True
        Else
            'incorrect range, return error
            result = False
        End If
        Return result
    End Function   
End Class