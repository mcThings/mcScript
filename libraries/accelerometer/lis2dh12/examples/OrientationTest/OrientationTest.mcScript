// Orientation Example for 120 module new accelerometer features
// Requires MQTT and LIS2DH12 library

// default configuration is:
// Low Power mode, 25 Hz, 2G 
// x,y,z accel (in g),  pitch and roll (in degrees) displayed every 10 seconds (no you can't detect yaw, need a magnetometer for that!)
// Sleep mode enabled only when interrupts are enabled (data rate is 10Hz in sleep mode) - wake time is 5 seconds (ie accelerometer wakes up for 5 sconds when threshold is exceeded).
// Orientation detection on INT1, pin 1. (Led Green = "top", Led Red = "left", Led Red and Green = "top", others = Led's off)

// N Waterton 22nd January 2017 V1.0: First Release


Class LISDH12_Test
    Shared accel As LIS2DH12
    Shared pin1data As Json
    Shared pin2data As Json
    Shared pin1count As Integer
    Shared pin2count As Integer
    
    Shared Event Boot()
        //Lplan.SetMidPowerMode(5000)
        MQTT.Publish("Status", "Booted")
        pin1data = New Json
        pin2data = New Json
        accel = New LIS2DH12
        If accel.online Then
            MQTT.Publish("Status", "LIS2DH12TR Sensor Online")
            If LIS2DH12.VERSION < 5 Then
                MQTT.Publish("Status", "LIS2DH12 Library is out of Date, please upgrade!")
            Else
                'version 5 and above of library
                'uncomment each line to test function
                'READ THE COMMENTS! configuration is straightforward, but can get complicated fast...
                'general format is threshold (in g), duration (in ms), interrupt number, pin number, latch interrupt (until read), axes
                'some functions have fewer options, some more. there are convenience versions of each function, which will default common values for you.
                'there is no error checking on values entered, you can enter silly numbers, and it will do *something* probably not what you expect though!
                'for example, at 25Hz data rate, each duration step is 40ms. Entering duration of 10.0 will result in 0ms, entering 6000.0 will result in 5080ms.
                accel.Setup(LIS2DH12.LOW_POWER_MODE, LIS2DH12.DATA_RATE_25HZ, LIS2DH12.SCALE_2G) 'could use a very low data rate if you don't care about fast switching 10Hz?
                'threshold determines the angle the interrupt triggers at (0.5 is about 30 degrees from 0g (ie horizontal) 0.5 = sin(30). 0.7 is about 45 degrees)
                'duration of 160ms means 4 (@25Hz) consecutive readings have to be above the threshold to trigger the Int. This reduces multiple interrupts.
                'accel.ConfigureOrientationInterrupt(0.5, 160.0, False, False, 1, 1) 'all axis orientation detection
                'accel.ConfigureOrientationInterrupt() 'same as above
                'accel.ConfigurePLInterrupt() '45 degree threshold, and only X and Y (4D) axis detection
                accel.ConfigureGarageDoorInterrupt() 'garage door setting detect bottom/down, or bottom/up depending on module orientation on the door)
                
                'publish paramterers
                Dim accelconfig As Json = accel.ReadConfiguration(0)
                MQTT.Publish("config", accelconfig)
                accelconfig = accel.ReadConfiguration(1)
                MQTT.Publish("int1", accelconfig)
                accelconfig = accel.ReadConfiguration(2)
                MQTT.Publish("int2", accelconfig)
                accelconfig = accel.ReadConfiguration(3)
                MQTT.Publish("click", accelconfig)
                accelconfig = accel.ReadConfiguration(4)
                MQTT.Publish("misc", accelconfig)
            End If
        Else
            MQTT.Publish("Status", "Accel Sensor Offline")
        End If
        //MQTT.use_delay = True
    End Event
    
    Shared Event Publish() RaiseEvent Every 10 Seconds
        Dim accelValues As ListOfFloat = accel.GetAccel()
        Dim PitchRoll As ListOfFloat = accel.GetPitchRollDegrees()
        
        Dim jData As Json = New Json
        jData.Add("X_Accel", accelValues(0))
        jData.Add("Y_Accel", accelValues(1))
        jData.Add("Z_Accel", accelValues(2))
        jData.Add("Pitch", PitchRoll(0))
        jData.Add("Roll", PitchRoll(1))
        jData.Add("Pin1 Count", pin1count) 'number of interrupts generated
        If pin1data.Count() > 0 Then
            jData.Add("Pin1", pin1data)
        End If
        jData.Add("Pin2 Count", pin2count) 'number of interrupts generated
        If pin2data.Count() > 0 Then
            jData.Add("Pin2", pin2data)
        End If
        MQTT.Publish("Data", jData)
        pin1data.Clear()
        pin2data.Clear()
        pin1count = 0
        pin2count = 0
    End Event
    
    Shared Event AccelerometerInt1()
        'limit interrupts - not needed if you get duration/threshold correct
        'Thread.Sleep(10000)
        'Thread.ClearHardwareEvent()
        pin1data.Clear() 'if you get too many interrupts without clearing pin1data - you will get an overflow!
        pin1count += 1
        
        //ORIENTATION DETECTION INT1
        Dim Orientation As String = accel.GetInt1Orientation()
        If Orientation <> Nothing Then
            pin1data.Add("Source", "Int 1")
            pin1data.Add("Orientation", Orientation)
            LedRed = False
            LedGreen = False
            Select Orientation
                Case "left"
                    LedRed = True
                Case "portrate_down"
                    LedRed = True
                Case "right"
                Case "portrate_up"
                Case "top"
                    LedGreen = True
                Case "landscape_down"
                    LedGreen = True
                Case "bottom"
                Case "landscape_up"
                Case "up"
                    LedRed = True
                    LedGreen = True
                Case "down"
            End Select
        End If  
        
    End Event
    
    Shared Event AccelerometerInt2()
        'limit interrupts - not needed if you get duration/threshold correct
        'Thread.Sleep(10000)
        'Thread.ClearHardwareEvent()
        pin2data.Clear() 'if you get too many interrupts without clearing pin2data - you will get an overflow!
        pin2count += 1
        
        //ORIENTATION DETECTION INT2
        Dim Orientation As String = accel.GetInt2Orientation()
        If Orientation <> Nothing Then
            pin2data.Add("Source", "Int 2")
            pin2data.Add("Orientation", Orientation)
            LedRed = False
            LedGreen = False
            Select Orientation
                Case "left"
                    LedRed = True
                Case "portrate_down"
                    LedRed = True
                Case "right"
                Case "portrate_up"
                Case "top"
                    LedGreen = True
                Case "landscape_down"
                    LedGreen = True
                Case "bottom"
                Case "landscape_up"
                Case "up"
                    LedRed = True
                    LedGreen = True
                Case "down"
            End Select
        End If        
        
    End Event
End Class