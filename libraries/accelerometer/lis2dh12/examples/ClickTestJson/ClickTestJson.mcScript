// Click Example Json for 120 module new accelerometer features
// Requires MQTT and LIS2DH12 library

// Get interrupt results as json with data

// default configuration is:
// Low Power mode, 50 Hz, 2G 
// x,y,z accel (in g),  pitch and roll (in degrees) displayed every 10 seconds (no you can't detect yaw, need a magnetometer for that!)
// Sleep mode enabled only when interrupts are enabled (data rate is 10Hz in sleep mode) - wake time is 5 seconds (ie accelerometer wakes up for 5 sconds when threshold is exceeded).
// Click detection on INT1, pin 1. (Led Green = Motion Detected)

// N Waterton 24th January 2017 V1.0: First Release


Class LISDH12_Test
    Shared accel As LIS2DH12
    Shared pin1data As Json
    Shared pin2data As Json
    Shared pin1count As Integer
    Shared pin2count As Integer
    
    Shared Event Boot()
        //Lplan.SetMidPowerMode(5000)
        MQTT.Publish("Status", "Booted")
        pin1data = New Json
        pin2data = New Json
        accel = New LIS2DH12
        If accel.online Then
            MQTT.Publish("Status", "LIS2DH12TR Sensor Online")
            If LIS2DH12.VERSION < 5 Then
                MQTT.Publish("Status", "LIS2DH12 Library is out of Date, please upgrade!")
            Else
                MQTT.Publish("Status", "LIS2DH12 Library " + LIS2DH12.VERSION_STRING)
                'version 5 and above of library
                'uncomment each line to test function
                'READ THE COMMENTS! configuration is straightforward, but can get complicated fast...
                'general format is threshold (in g), duration (in ms), interrupt number, pin number, latch interrupt (until read), axes
                'some functions have fewer options, some more. there are convenience versions of each function, which will default common values for you.
                'there is no error checking on values entered, you can enter silly numbers, and it will do *something* probably not what you expect though!
                'for example, at 50Hz data rate, each duration step is 20ms. Entering duration of 10.0 will result in 0ms, entering 6000.0 will result in 2560ms.
                accel.Setup(LIS2DH12.LOW_POWER_MODE, LIS2DH12.DATA_RATE_50HZ, LIS2DH12.SCALE_2G)
                accel.SetSleepToWakeThreshold(0) 'disable sleep mode. Sleep mode makes things complicated as the data rate changes from 10Hz to whatever is set.
                'getting the timimg right is hard enough as it is - see below! if first tap deteection is not critical, leave it on.
                'NOTE: Click (tap) setup is complicated! hard to get the timing right.
                '      Click is VERY Sensitive! it may not seems so but it is! Threshold is not the problem, timing is.
                '      the second parameter (TIME_LIMIT) is the time that the click must end within to be counted. NOT duration!
                '      making this number shorter, makes Click LESS sensitive. This is also dependant on data rate.
                '      so at 50 Hz, setting this to 10ms = 0 counts = no click detection! setting it to 20ms = 1 count
                '      so the click has to start and end within 1 count - difficult!
                '      if you Click (tap) hard, the threshold will be exeeded for more than (TIME_LIMIT) = no click detected!
                '      I would leave the HP filter on as well (or your threshold has to be over 1.0)
                '      If you have sleep mode enabled, the timing changes (10Hz in sleep mode) - this makes the first click hard to detect.
                'accel.ConfigureClickInterrupt(0.15, 100.0, 40.0, 200.0, (LIS2DH12.ZD), True, 1) 'double click on Z enabled, High pass filter, pin 1
                accel.ConfigureClickInterrupt(0.15, 100.0, 0, 0, (LIS2DH12.YS), True, 1) 'single click on Y enabled, High pass filter, pin 1
                'accel.ConfigureSingleClickInterrupt() 'convenience functions for simple click set up (pin1, Latched)
                'accel.ConfigureDoubleClickInterrupt()
                'accel.ConfigureSingleDoubleClickInterrupt() 'not convinced this works, only seem to be able to detect double clicks...
                
                'publish paramterers
                Dim accelconfig As Json = accel.ReadConfiguration(0)
                MQTT.Publish("config", accelconfig)
                accelconfig = accel.ReadConfiguration(1)
                MQTT.Publish("int1", accelconfig)
                accelconfig = accel.ReadConfiguration(2)
                MQTT.Publish("int2", accelconfig)
                accelconfig = accel.ReadConfiguration(3)
                MQTT.Publish("click", accelconfig)
                accelconfig = accel.ReadConfiguration(4)
                MQTT.Publish("misc", accelconfig)
            End If
        Else
            MQTT.Publish("Status", "Accel Sensor Offline")
        End If
        //MQTT.use_delay = True
    End Event
    
    Shared Event Publish() RaiseEvent Every 10 Seconds
        Dim accelValues As ListOfFloat = accel.GetAccel()
        Dim PitchRoll As ListOfFloat = accel.GetPitchRollDegrees()
        
        'NOTE: If you put too much in a json object, it will cause a run time error (overlow) and the module will reboot
        '      Below is right on the limit...
        
        Dim jData As Json = New Json
        jData.Add("X_Accel", accelValues(0))
        jData.Add("Y_Accel", accelValues(1))
        jData.Add("Z_Accel", accelValues(2))
        jData.Add("Pitch", PitchRoll(0))
        jData.Add("Roll", PitchRoll(1))
        If pin1data.Count() > 0 Then
            jData.Add("Pin1 Count", pin1count) 'number of interrupts generated
            jData.Add("Pin1", pin1data)
        End If
        If pin2data.Count() > 0 Then
            jData.Add("Pin2 Count", pin2count) 'number of interrupts generated
            jData.Add("Pin2", pin2data)
        End If
        MQTT.Publish("Data", jData)
        
        pin1data.Clear()
        pin2data.Clear()
        pin1count = 0
        pin2count = 0
    End Event
    
    Shared Event AccelerometerInt1()
        'limit interrupts - not needed if you get duration/threshold correct
        'Thread.Sleep(10000)
        'Thread.ClearHardwareEvent()
        pin1data.Clear() 'if you get too many interrupts without clearing pin1data - you will get an overflow!
        pin1count += 1
        
        'Read Click source register to clear interrupt and get source
        Dim ClickSource As Json = accel.GetIntClickSourceAsJson(LIS2DH12.J_VALUES)
        If ClickSource.Count> 0 Then 'if we have an interrupt (of any kind, x,y or z)
            pin1data.Add("click", ClickSource)
            
            LedGreen = True
            Thread.Sleep(3000)
            LedGreen = False
            
        End If
        
        //MOTION/TRANSIENT Detection INT1
        'Read Int source register To clear interrupt And get source
        '        Dim IntSource As Json = accel.GetInt1SourceAsJson(LIS2DH12.J_VALUES | LIS2DH12.J_SUMMARY)
        '        If IntSource.Count> 0 Then 'if we have an interrupt (of any kind, x,y or z)
        '            pin1data.Add("Int 1", IntSource)
        '            
        '            LedGreen = True
        '            Thread.Sleep(3000)
        '            LedGreen = False
        '            
        '        End If 
        
    End Event
    
    Shared Event AccelerometerInt2()
        'limit interrupts - not needed if you get duration/threshold correct
        'Thread.Sleep(10000)
        'Thread.ClearHardwareEvent()
        pin2data.Clear() 'if you get too many interrupts without clearing pin2data - you will get an overflow!
        pin2count += 1
        
        'Read Click source register to clear interrupt and get source
        Dim ClickSource As Json = accel.GetIntClickSourceAsJson()
        If ClickSource.Count> 0 Then 'if we have an interrupt (of any kind, x,y or z)
            pin1data.Add("click", ClickSource)
            
            LedRed = True
            Thread.Sleep(3000)
            LedRed = False
            
        End If
        
    End Event
End Class