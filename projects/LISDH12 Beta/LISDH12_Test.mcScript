Class LISDH12_Test
    
    Const Version As String = "V1.00"
    Shared data As dataType
    Const Sub_Topic As String = "MCThings/Publish"
    Shared Sub_Topic_Knock_Enable As String
    Shared Publish_data As Boolean
    Shared TimeSinceKnockTriggered As Integer
    Shared TimeSinceDoorClosed As Integer
    Shared accel As LIS2DH12 
    
    Shared Event Boot()
        Publish_data = True
        Sub_Topic_Knock_Enable = "MCThings/" + Device.mcUID().ToString("X8") + "/EnableDoorKnock"
        TimeSinceKnockTriggered = 0
        TimeSinceDoorClosed = 0
        MQTT.Subscribe(Sub_Topic)
        MQTT.Subscribe(Sub_Topic_Knock_Enable)
        MQTT.Publish("Status", "Booted: " + Version)
        accel = New LIS2DH12
        //MQTT.Publish("WHO_AM_I", accel.GetID)
        If accel.online Then
            MQTT.Publish("Status", "LIS2DH12TR Sensor Online")
            //accel.ConfigureShockInterrupt(0.1, 20) //default 0.8, 0 (magnitude in g, duraton in ms)
            'set accelerometer to cause interrupt if accelation is > 1.15Gs for longer than 2ms (any axis)
            accel.ConfigureShockInterrupt(1.15, 20.0)
            MQTT.Publish("KnockEnable", "True")
            'accel.ConfigureOrientationInterrupt(2.4, 500) //orientation not used in door sensor
        Else
            MQTT.Publish("Status", "Accel Sensor Offline")
            MQTT.Publish("KnockEnable", "False")
        End If
    End Event
    
    Shared Event NewGateway()
        MQTT.Subscribe(Sub_Topic)
        MQTT.Subscribe(Sub_Topic_Knock_Enable)
    End Event
    
    Shared Event AccelerometerInt1()
        'debounce interrupt
        //Thread.Sleep(100000)
        //Thread.ClearHardwareEvent()
        
        'Read Int source register to clear interrupt
        If ((accel.GetINT1ActiveInterrupt() & LIS2DH12.INT_ACTIVE) = LIS2DH12.INT_ACTIVE) Then
            'interrupt generated 
            LedRed = True
            If ReedSwitch = False Then //If door is closed
                //if more than 60 seconds since Knock last triggered, and more than 5 seconds since door closed
                If (Device.Uptime() - TimeSinceKnockTriggered > 60) And (Device.Uptime() - TimeSinceDoorClosed > 5) Then
                    Dim timeSinceLastTransient As Integer = Device.GetTimeSpan()
                    'If at least two transients within 0.75 seconds
                    If timeSinceLastTransient < 750000 And timeSinceLastTransient > 0 Then
                        Thread.Sleep(1000000) //sleep 1 second
                        If ReedSwitch = False Then //If door is still closed (prevent door opening transients from triggering)
                            TimeSinceKnockTriggered = Device.Uptime()
                            MQTT.Publish("Doorknock", True)
                        End If
                    End If
                End If
            End If      
        End If 
        
        'restart interrupt       
        accel.SetINT1ActiveInterrupt(LIS2DH12.INT_SRC_XH | LIS2DH12.INT_SRC_YH | LIS2DH12.INT_SRC_ZH)
        LedRed = False
    End Event
    
    Shared Event ReedSwitchChanged()
        TimeSinceDoorClosed = Device.Uptime()
        Thread.Sleep(500000) //debounce
        Thread.ClearHardwareEvent()
        LedGreen = True
        Dim Door_Status As Boolean = ReedSwitch
        MQTT.Publish("Door", Door_Status)
        MQTT.BeaconPublish(dataType.DOOR, Door_Status)
        LedGreen = False
    End Event
    
    Shared Event SubscriptionDelivery()
        Dim msg As Message = Lplan.GetDelivery()
        'Dim payload As ListOfByte = msg.PayLoad
        Dim tmp As Boolean = True 'payload.ExtractFloat(0)
        Dim tmp_str As String = msg.PayLoad.ToString()
        Dim topic As String = msg.Topic.ToString()
        'MQTT.Publish("Status", "Received Message: " + topic + " : " + tmp_str)
        If topic = Sub_Topic Then
            If Boolean.TryConvert(tmp_str, tmp) Then
                Publish_data = tmp
                MQTT.Publish("Publish", Publish_data)
            Else
                MQTT.Publish("Publish", tmp_str + " :Boolean Conversion failed")
            End If 
        ElseIf topic = Sub_Topic_Knock_Enable Then
            If Boolean.TryConvert(tmp_str, tmp) Then
                If accel.online Then
                    MQTT.Publish("KnockEnable", tmp)
                    If tmp Then
                        //accel.Active()
                    Else
                        //accel.Standby()
                    End If
                Else
                    MQTT.Publish("Status", "Accel Sensor Offline")
                    MQTT.Publish("KnockEnable", "False")
                End If
            Else
                MQTT.Publish("KnockEnable", tmp_str + " :Boolean Conversion failed")
            End If
        Else
            MQTT.Publish("Status", topic + " :Unknown Command")
        End If
    End Event
    
    Shared Event Publish() RaiseEvent Every 10 Seconds //1 Minutes
        LedGreen = True
        Select data
            Case dataType.UPTIME
                Dim Uptime As Integer = Device.Uptime()
                If Publish_data Then
                    MQTT.Publish("Uptime", Uptime)
                End If
                If Uptime < Short.MaxValue Then
                    MQTT.BeaconPublish(dataType.UPTIME, Uptime)
                End If
                data = dataType.BATTVOLTAGE
            Case dataType.BATTVOLTAGE
                Dim BattVolt As Integer = Device.BatteryVoltage()
                If Publish_data Then
                    MQTT.Publish("BatteryVoltage", BattVolt)
                End If
                MQTT.BeaconPublish(dataType.BATTVOLTAGE, BattVolt)
                data = dataType.TEMPERATURE
            Case dataType.TEMPERATURE
                Dim TempC As Float = TempSensor.GetTemp
                If Publish_data Then
                    MQTT.Publish("Temperature", TempC)
                End If
                MQTT.BeaconPublish(dataType.TEMPERATURE, TempC)
                //data = dataType.TEMPERATURE2
                data = dataType.DOOR
                '            Case dataType.TEMPERATURE2
                '                //Dim TempC As Float = TempSensor.GetTemp
                '                Dim TempC As Float
                '                Dim TempC_raw As Short = accel.readTemperature()
                '                TempC = TempC_raw / 10.0
                '                If Publish_data Then
                '                    MQTT.Publish("Temperature2", TempC)
                '                End If
                '                MQTT.BeaconPublish(dataType.TEMPERATURE2, TempC)
                '                data = dataType.DOOR
            Case dataType.DOOR
                Dim Door_Status As Boolean = ReedSwitch
                If Publish_data Then
                    MQTT.Publish("Door", Door_Status) //True = OPEN False = CLOSED
                End If
                MQTT.BeaconPublish(dataType.DOOR, Door_Status)
                data = dataType.UPTIME
            Case Else
                MQTT.Publish("Status", "OnLine")
                data = dataType.UPTIME
        End Select
        LedGreen = False
    End Event
End Class 
